<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>üì∑ CCTV / Cam Finder</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0; padding: 20px;
      background: #111;
      color: #eee;
    }
    h1 { text-align: center; }
    #controls {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      justify-content: center;
      margin-bottom: 20px;
    }
    input[type=text], button, select {
      padding: 8px;
      border-radius: 4px;
      border: 1px solid #444;
      background: #222;
      color: #eee;
      min-width: 150px;
    }
    button { cursor: pointer; }
    #results {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 16px;
    }
    .cam-card {
      background: #222;
      border: 1px solid #444;
      border-radius: 6px;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }
    .cam-card img {
      width: 100%;
      height: 180px;
      object-fit: cover;
      background: #333;
    }
    .cam-info {
      padding: 10px;
      flex: 1;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }
    .cam-info h4 { margin: 0 0 8px; font-size: 1.1em; }
    .cam-info p { margin: 4px 0; font-size: .9em; }
    footer { text-align: center; margin-top: 30px; font-size: .8em; color: #555; }
  </style>
</head>
<body>

  <h1>üì∑ CCTV / Cam Finder</h1>

  <div id="controls">
    <input type="text" id="cityInput" placeholder="City (e.g., Berlin)" />
    <input type="text" id="countryInput" placeholder="Country (e.g., Germany)" />
    <select id="limitSelect">
      <option value="10">Limit 10</option>
      <option value="25">Limit 25</option>
      <option value="50">Limit 50</option>
    </select>
    <button id="searchBtn">üîç Search Cameras</button>
  </div>

  <div id="results"></div>

  <footer>
    Powered by Helios.dev | No backend required. CORS permissions may vary by camera.
  </footer>

  <script>
    const API_BASE = 'https://helios.earth/developers/api';

    async function searchCams(city, country, limit) {
      const params = new URLSearchParams();
      if (city) params.append('city', city);
      if (country) params.append('country', country);
      params.append('limit', limit);
      const url = `${API_BASE}/cameras?${params.toString()}`;

      try {
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        return resp.json();
      } catch (err) {
        console.error(err);
        alert(`Error fetching cameras: ${err.message}`);
        return null;
      }
    }

    function renderCameras(cameras) {
      const container = document.getElementById('results');
      container.innerHTML = '';

      if (!cameras || cameras.length === 0) {
        container.innerHTML = `<p style="text-align:center;">No cameras found.</p>`;
        return;
      }

      cameras.forEach(cam => {
        const card = document.createElement('div');
        card.className = 'cam-card';

        const img = document.createElement('img');
        img.src = cam.snapshot_url || '';
        img.alt = cam.location || 'Camera';
        img.onerror = () => { img.src = 'https://via.placeholder.com/320x180?text=No+Image'; };

        const info = document.createElement('div');
        info.className = 'cam-info';

        const title = document.createElement('h4');
        title.textContent = cam.location || 'Unknown Location';

        const meta = document.createElement('p');
        meta.textContent = `${cam.city || ''}, ${cam.country || ''}`;

        const coords = document.createElement('p');
        coords.textContent = `Coordinates: ${cam.latitude?.toFixed(4)}, ${cam.longitude?.toFixed(4)}`;

        const viewBtn = document.createElement('button');
        viewBtn.textContent = '‚ñ∂Ô∏è View Live';
        viewBtn.onclick = () => {
          window.open(cam.stream_url || cam.snapshot_url, '_blank');
        };

        info.append(title, meta, coords, viewBtn);
        card.append(img, info);
        container.append(card);
      });
    }

    document.getElementById('searchBtn').addEventListener('click', async () => {
      const city = document.getElementById('cityInput').value.trim();
      const country = document.getElementById('countryInput').value.trim();
      const limit = document.getElementById('limitSelect').value;

      document.getElementById('results').innerHTML = `<p style="text-align:center;">Searching...</p>`;
      const cams = await searchCams(city, country, limit);
      renderCameras(cams?.items || cams);
    });
  </script>
</body>
</html>
